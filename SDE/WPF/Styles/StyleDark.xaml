<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:WPF="clr-namespace:TokeiLibrary.WPF;assembly=TokeiLibrary"
                    xmlns:TreeViewManager="clr-namespace:GrfToWpfBridge.TreeViewManager;assembly=GrfToWpfBridge"
                    xmlns:styles="clr-namespace:TokeiLibrary.WPF.Styles;assembly=TokeiLibrary"
                    xmlns:controls="clr-namespace:SDE.View.Controls"
                    xmlns:avalonedit="http://icsharpcode.net/sharpdevelop/avalonedit"
                    xmlns:wpfBugFix="clr-namespace:TokeiLibrary.WpfBugFix;assembly=TokeiLibrary"
                    xmlns:themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
                    xmlns:application="clr-namespace:GrfToWpfBridge.Application;assembly=GrfToWpfBridge">
    <!-- Dark theme colors and brushes -->
    <Color x:Key="UIThemeDefaultTextColor">#D6D4D8</Color>
    <Color x:Key="UIThemeBackground1Color">#2F3136</Color>
    <Color x:Key="UIThemeBackground2Color">#36393F</Color>
    <Color x:Key="UIThemeSelectBorderColor">#878990</Color>
    <Color x:Key="UIThemeSelectBackgroundColor">#40444B</Color>
    <Color x:Key="UIThemeSelectTextColor">#FEF8F3</Color>
    <Color x:Key="UIThemeMouseOverBorderColor">#92949C</Color>
    <Color x:Key="UIThemeMouseOverBackgroundColor">#292B2F</Color>
    <Color x:Key="UIThemeMouseOverTextColor">#DBDCDD</Color>
    <Color x:Key="UIThemeSeparatorLineColor">#474A4F</Color>
    <Color x:Key="UIThemeHyperlinkColor">#FEFBF8</Color>
    <Color x:Key="UIThemeSpriteEditorSeparatorColor">#767B83</Color>
    <Color x:Key="UIThemeFadeTextColor">#878990</Color>
    <Color x:Key="UIThemeMainTabDefaultTextColor">#B1B1B1</Color>
    <Color x:Key="UIThemeDialogFooterColor">#2B2C31</Color>
    <Color x:Key="UIThemeTreeViewDragEnterBorderColor">#05B543</Color>
    <Color x:Key="UIThemeTreeViewDragEnterBackgroundColor">#1B6435</Color>
    <Color x:Key="UIThemeTreeViewDragUnableBorderColor">#B50505</Color>
    <Color x:Key="UIThemeTreeViewDragUnableBackgroundColor">#641B1B</Color>
    <Color x:Key="UIThemeMenuBackgroundColor">#202225</Color>
    <Color x:Key="UIThemeContextMenuDefaultTextColor">#9B9B9C</Color>
    <Color x:Key="UIThemeContextMenuDisabledTextColor">#5B5B5B</Color>
    <Color x:Key="UIThemeContextMenuMouseOverTextColor">#F1F1F1</Color>
    <Color x:Key="UIThemeContextMenuMouseOverBackgroundColor">#040405</Color>
    <Color x:Key="UIThemeTextBoxBorderColor">#484C52</Color>
    <Color x:Key="UIThemeTextBoxBackgroundColor">#484C52</Color>
    <Color x:Key="UIThemePopupBorderColor">#18191C</Color>
    <Color x:Key="UIThemePopupBackgroundColor">#212226</Color>
    <Color x:Key="UIThemeListViewBorderColor">#242529</Color>
    <Color x:Key="UIThemeListViewMouseOverBackgroundColor">#4C4F57</Color>
    <Color x:Key="UIThemeComboBoxDisabled">#3D4146</Color>
    
    <SolidColorBrush x:Key="UIThemeBackground1Brush" Color="{StaticResource UIThemeBackground1Color}" />
    <SolidColorBrush x:Key="UIThemeBackground2Brush" Color="{StaticResource UIThemeBackground2Color}" />
    <SolidColorBrush x:Key="UIThemeSelectBorderBrush" Color="{StaticResource UIThemeSelectBorderColor}" />
    <SolidColorBrush x:Key="UIThemeSelectBackgroundBrush" Color="{StaticResource UIThemeSelectBackgroundColor}" />
    <SolidColorBrush x:Key="UIThemeSelectTextBrush" Color="{StaticResource UIThemeSelectTextColor}" />
    <SolidColorBrush x:Key="UIThemeFadeTextBrush" Color="{StaticResource UIThemeFadeTextColor}" />
    <SolidColorBrush x:Key="UIThemeMouseOverBorderBrush" Color="{StaticResource UIThemeMouseOverBorderColor}" />
    <SolidColorBrush x:Key="UIThemeMouseOverBackgroundBrush" Color="{StaticResource UIThemeMouseOverBackgroundColor}" />
    <SolidColorBrush x:Key="UIThemeMouseOverTextBrush" Color="{StaticResource UIThemeMouseOverTextColor}" />
    <SolidColorBrush x:Key="UIThemeSeparatorLineBrush" Color="{StaticResource UIThemeSeparatorLineColor}" />
    <SolidColorBrush x:Key="UIThemeSpriteEditorSeparatorBrush" Color="{StaticResource UIThemeSpriteEditorSeparatorColor}" />
    <SolidColorBrush x:Key="UIThemeMenuBackgroundBrush" Color="{StaticResource UIThemeMenuBackgroundColor}" />
    <SolidColorBrush x:Key="UIThemeContextMenuDefaultTextBrush" Color="{StaticResource UIThemeContextMenuDefaultTextColor}" />
    <SolidColorBrush x:Key="UIThemeContextMenuDisabledTextBrush" Color="{StaticResource UIThemeContextMenuDisabledTextColor}" />
    <SolidColorBrush x:Key="UIThemeContextMenuMouseOverTextBrush" Color="{StaticResource UIThemeContextMenuMouseOverTextColor}" />
    <SolidColorBrush x:Key="UIThemeContextMenuMouseOverBackgroundBrush" Color="{StaticResource UIThemeContextMenuMouseOverBackgroundColor}" />
    <SolidColorBrush x:Key="UIThemeTextBoxBorderBrush" Color="{StaticResource UIThemeTextBoxBorderColor}" />
    <SolidColorBrush x:Key="UIThemeTextBoxBackgroundBrush" Color="{StaticResource UIThemeTextBoxBackgroundColor}" />
    <SolidColorBrush x:Key="UIThemePopupBorderBrush" Color="{StaticResource UIThemePopupBorderColor}"/>
    <SolidColorBrush x:Key="UIThemePopupBackgroundBrush" Color="{StaticResource UIThemePopupBackgroundColor}"/>
    <SolidColorBrush x:Key="UIThemeListViewBorderBrush" Color="{StaticResource UIThemeListViewBorderColor}"/>
    <SolidColorBrush x:Key="UIThemeListViewMouseOverBackgroundBrush" Color="{StaticResource UIThemeListViewMouseOverBackgroundColor}"/>
    <SolidColorBrush x:Key="UIThemeComboBoxDisabledBrush" Color="{StaticResource UIThemeComboBoxDisabled}"/>

    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="{StaticResource UIThemeMouseOverBorderColor}"/>
    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrush}" Color="White"/>
    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="White"/>
    <Color x:Key="{x:Static SystemColors.HighlightTextColor}">Red</Color>
    <Color x:Key="{x:Static SystemColors.HighlightTextColorKey}">Red</Color>
    <Color x:Key="{x:Static SystemColors.HighlightColorKey}">Red</Color>

    <!-- GRF Editor style overrides - ListView property colors -->
    <Color x:Key="UIThemePropertyDefaultColor">Black</Color>
    <Color x:Key="UIThemePropertyLzmaColor">#CE6ACB</Color>
    <Color x:Key="UIThemePropertyEncryptedColor">#F68D00</Color>
    <Color x:Key="UIThemePropertyRemovedColor">#FF5858</Color>
    <Color x:Key="UIThemePropertyAddedColor">#A2A2FF</Color>

    <SolidColorBrush x:Key="CellBrushDefault" Color="{StaticResource UIThemePropertyDefaultColor}"/>
    <SolidColorBrush x:Key="CellBrushLzma" Color="{StaticResource UIThemePropertyLzmaColor}"/>
    <SolidColorBrush x:Key="CellBrushEncrypted" Color="{StaticResource UIThemePropertyEncryptedColor}"/>
    <SolidColorBrush x:Key="CellBrushRemoved" Color="{StaticResource UIThemePropertyRemovedColor}"/>
    <SolidColorBrush x:Key="CellBrushAdded" Color="{StaticResource UIThemePropertyAddedColor}"/>
    <SolidColorBrush x:Key="CellBrushModified" Color="#00DA00"/>
    <SolidColorBrush x:Key="CellBrushMvp" Color="{StaticResource UIThemePropertyEncryptedColor}"/>

    <!-- GRF Editor style overrides - TabControl -->
    <SolidColorBrush x:Key="TabControlBackground" Color="{StaticResource UIThemeBackground1Color}"/>
    <SolidColorBrush x:Key="TabControlBorder" Color="{StaticResource UIThemeSeparatorLineColor}"/>
    <SolidColorBrush x:Key="TabItemBackground" Color="{StaticResource UIThemeBackground2Color}"/>
    <SolidColorBrush x:Key="TabItemMouseOverBackground" Color="{StaticResource UIThemeMouseOverBackgroundColor}"/>
    <SolidColorBrush x:Key="TabItemMouseOverBorder" Color="{StaticResource UIThemeMouseOverBorderColor}"/>
    <SolidColorBrush x:Key="TabItemSelectedBackground" Color="{StaticResource UIThemeSelectBackgroundColor}"/>
    <SolidColorBrush x:Key="TabItemSelectedBorder" Color="{StaticResource UIThemeSelectBorderColor}"/>
    <SolidColorBrush x:Key="TabItemTextSelectedForeground" Color="{StaticResource UIThemeSelectTextColor}"/>
    <SolidColorBrush x:Key="TabItemTextNormalForeground" Color="{StaticResource UIThemeMainTabDefaultTextColor}"/>
    <SolidColorBrush x:Key="SeperatorBrush" Color="{StaticResource UIThemeSeparatorLineColor}"/>

    <!-- GRF Editor style overrides - FancyButton -->
    <SolidColorBrush x:Key="FancyButtonHeaderForeground" Color="White"/>
    <SolidColorBrush x:Key="FancyButtonDisabledBorderBrush" Color="#81202225"/>
    <SolidColorBrush x:Key="FancyButtonDisabledBackgroundBrush" Color="#81202225"/>
    <SolidColorBrush x:Key="FancyButtonMouseOverBorderBrush" Color="{StaticResource UIThemeMouseOverBorderColor}"/>
    <SolidColorBrush x:Key="FancyButtonMouseOverBackgroundBrush" Color="{StaticResource UIThemeMouseOverBackgroundColor}"/>
    <SolidColorBrush x:Key="FancyButtonPressedBorderBrush" Color="{StaticResource UIThemeSelectBorderColor}"/>
    <SolidColorBrush x:Key="FancyButtonPressedBackgroundBrush" Color="{StaticResource UIThemeSelectBackgroundColor}"/>

    <!-- GRF Editor style overrides - Avalon -->
    <Color x:Key="UIThemeAvalonSelectionColor">#A0AEB7C0</Color>
    <Color x:Key="UIThemeAvalonMarkerColor">#02A90B</Color>
    
    <SolidColorBrush x:Key="AvalonEditorBackground" Color="{StaticResource UIThemeBackground2Color}"/>
    <SolidColorBrush x:Key="AvalonEditorSelectionBrush" Color="{StaticResource UIThemeAvalonSelectionColor}" />
    <SolidColorBrush x:Key="AvalonEditorMarkerBrush" Color="{StaticResource UIThemeAvalonMarkerColor}" />
    
    <!-- GRF Editor style overrides - Others -->
    <SolidColorBrush x:Key="MouseOverTextBrush" Color="{StaticResource UIThemeHyperlinkColor}" />
    <SolidColorBrush x:Key="TextForeground" Color="{StaticResource UIThemeDefaultTextColor}"/>
    <SolidColorBrush x:Key="ListItemSearchBackground" Color="{StaticResource UIThemeBackground1Color}"/>
    <SolidColorBrush x:Key="UIDialogBackground" Color="{StaticResource UIThemeDialogFooterColor}" />
    <SolidColorBrush x:Key="UIBackgroundBrush" Color="{StaticResource UIThemeBackground2Color}" />
    <SolidColorBrush x:Key="EncryptionDialogBorderBrush" Color="{StaticResource UIThemeDialogFooterColor}" />
    <SolidColorBrush x:Key="ToggleMemoryBorderBrush" Color="{StaticResource UIThemePopupBorderColor}"/>
    <SolidColorBrush x:Key="UIDragDropBrush" Color="{StaticResource UIThemeTextBoxBorderColor}"/>

    <LinearGradientBrush x:Key="ToggleMemoryBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="{StaticResource UIThemePopupBackgroundColor}" />
        <GradientStop Offset="0.5" Color="{StaticResource UIThemePopupBackgroundColor}" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="SearchDialogSubmenuBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="{StaticResource UIThemePopupBackgroundColor}" />
        <GradientStop Offset="0.5" Color="{StaticResource UIThemePopupBackgroundColor}" />
    </LinearGradientBrush>
    
    <!-- TreeView -->
    <SolidColorBrush x:Key="UITreeViewDefaultForegroundBrush" Color="{StaticResource UIThemeFadeTextColor}"/>
    <SolidColorBrush x:Key="UITreeViewSelectedBorderBrush" Color="{StaticResource UIThemeSelectBorderColor}"/>
    <SolidColorBrush x:Key="UITreeViewSelectedBackgroundBrush" Color="{StaticResource UIThemeSelectBackgroundColor}"/>
    <SolidColorBrush x:Key="UITreeViewSelectedForegroundBrush" Color="{StaticResource UIThemeSelectTextColor}"/>
    <SolidColorBrush x:Key="UITreeViewMouseOverBorderBrush" Color="{StaticResource UIThemeMouseOverBorderColor}"/>
    <SolidColorBrush x:Key="UITreeViewMouseOverBackgroundBrush" Color="{StaticResource UIThemeMouseOverBackgroundColor}"/>
    <SolidColorBrush x:Key="UITreeViewMouseOverForegroundBrush" Color="{StaticResource UIThemeMouseOverTextColor}"/>
    <SolidColorBrush x:Key="UITreeViewDragEnterBorderBrush" Color="{StaticResource UIThemeTreeViewDragEnterBorderColor}"/>
    <SolidColorBrush x:Key="UITreeViewDragEnterBackgroundBrush" Color="{StaticResource UIThemeTreeViewDragEnterBackgroundColor}"/>
    <SolidColorBrush x:Key="UITreeViewUnableBorderBrush" Color="{StaticResource UIThemeTreeViewDragUnableBorderColor}"/>
    <SolidColorBrush x:Key="UITreeViewUnableBackgroundBrush" Color="{StaticResource UIThemeTreeViewDragUnableBackgroundColor}"/>

    <!-- Dark theme styles -->
    <Style TargetType="WPF:TkTreeViewItem">
        <Setter Property="DefaultTextForeground" Value="{StaticResource UITreeViewDefaultForegroundBrush}" />
        <Setter Property="SelectBackgroundBrush" Value="{StaticResource UITreeViewSelectedBackgroundBrush}" />
        <Setter Property="SelectBorderBrush" Value="{StaticResource UITreeViewSelectedBorderBrush}" />
        <Setter Property="MouseOverBackgroundBrush" Value="{StaticResource UITreeViewMouseOverBackgroundBrush}" />
        <Setter Property="MouseOverBorderBrush" Value="{StaticResource UITreeViewMouseOverBorderBrush}" />
        <Setter Property="MouseOverTextForeground" Value="{StaticResource UITreeViewMouseOverForegroundBrush}" />
        <Setter Property="SelectedTextForeground" Value="{StaticResource UITreeViewSelectedForegroundBrush}" />
        <Setter Property="DragEnterBackgroundBrush" Value="{StaticResource UITreeViewDragEnterBackgroundBrush}" />
        <Setter Property="DragEnterBorderBrush" Value="{StaticResource UITreeViewDragEnterBorderBrush}" />
        <Setter Property="UnableBackgroundBrush" Value="{StaticResource UITreeViewUnableBackgroundBrush}" />
        <Setter Property="UnableBorderBrush" Value="{StaticResource UITreeViewUnableBorderBrush}" />
    </Style>

    <Style TargetType="TreeViewManager:ProjectTreeViewItem">
        <Setter Property="DefaultTextForeground" Value="{StaticResource UITreeViewDefaultForegroundBrush}" />
        <Setter Property="SelectBackgroundBrush" Value="{StaticResource UITreeViewSelectedBackgroundBrush}" />
        <Setter Property="SelectBorderBrush" Value="{StaticResource UITreeViewSelectedBorderBrush}" />
        <Setter Property="MouseOverBackgroundBrush" Value="{StaticResource UITreeViewMouseOverBackgroundBrush}" />
        <Setter Property="MouseOverBorderBrush" Value="{StaticResource UITreeViewMouseOverBorderBrush}" />
        <Setter Property="MouseOverTextForeground" Value="{StaticResource UITreeViewMouseOverForegroundBrush}" />
        <Setter Property="SelectedTextForeground" Value="{StaticResource UITreeViewSelectedForegroundBrush}" />
        <Setter Property="DragEnterBackgroundBrush" Value="{StaticResource UITreeViewDragEnterBackgroundBrush}" />
        <Setter Property="DragEnterBorderBrush" Value="{StaticResource UITreeViewDragEnterBorderBrush}" />
        <Setter Property="UnableBackgroundBrush" Value="{StaticResource UITreeViewUnableBackgroundBrush}" />
        <Setter Property="UnableBorderBrush" Value="{StaticResource UITreeViewUnableBorderBrush}" />
    </Style>

    <Style TargetType="TreeViewManager:TypeTreeViewItem">
        <Setter Property="DefaultTextForeground" Value="{StaticResource UITreeViewDefaultForegroundBrush}" />
        <Setter Property="SelectBackgroundBrush" Value="{StaticResource UITreeViewSelectedBackgroundBrush}" />
        <Setter Property="SelectBorderBrush" Value="{StaticResource UITreeViewSelectedBorderBrush}" />
        <Setter Property="MouseOverBackgroundBrush" Value="{StaticResource UITreeViewMouseOverBackgroundBrush}" />
        <Setter Property="MouseOverBorderBrush" Value="{StaticResource UITreeViewMouseOverBorderBrush}" />
        <Setter Property="MouseOverTextForeground" Value="{StaticResource UITreeViewMouseOverForegroundBrush}" />
        <Setter Property="SelectedTextForeground" Value="{StaticResource UITreeViewSelectedForegroundBrush}" />
        <Setter Property="DragEnterBackgroundBrush" Value="{StaticResource UITreeViewDragEnterBackgroundBrush}" />
        <Setter Property="DragEnterBorderBrush" Value="{StaticResource UITreeViewDragEnterBorderBrush}" />
        <Setter Property="UnableBackgroundBrush" Value="{StaticResource UITreeViewUnableBackgroundBrush}" />
        <Setter Property="UnableBorderBrush" Value="{StaticResource UITreeViewUnableBorderBrush}" />
    </Style>
    
    <Style TargetType="styles:TkWindow">
        <Setter Property="Foreground" Value="{DynamicResource TextForeground}" />
        <Setter Property="Background" Value="{DynamicResource TabControlBackground}" />
    </Style>

    <Style TargetType="TabControl">
        <Setter Property="Foreground" Value="{DynamicResource TextForeground}" />
    </Style>

    <Style TargetType="WPF:TkView">
        <Setter Property="Background" Value="{StaticResource UIThemeBackground1Brush}" />
    </Style>

    <Style TargetType="Menu">
        <Setter Property="Background" Value="{StaticResource UIThemeMenuBackgroundBrush}" />
    </Style>

    <!-- Menu and ContextMenu styles -->
    <Style x:Key="MenuHeaderStyle" TargetType="Label">
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}}" />
        <Setter Property="FontWeight" Value="Bold" />
    </Style>

    <Style TargetType="MenuItem">
        <Setter Property="Background" Value="Black" />
        <Setter Property="Foreground" Value="{StaticResource UIThemeContextMenuDefaultTextBrush}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource UIThemeContextMenuDisabledTextBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="ContextMenu">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="True" />
        <Setter Property="Foreground" Value="{StaticResource UIThemeContextMenuDefaultTextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border BorderThickness="1" BorderBrush="{DynamicResource UIThemePopupBorderBrush}" CornerRadius="4"
                            x:Name="Border"
                            Background="{DynamicResource UIThemePopupBackgroundBrush}">
                        <StackPanel ClipToBounds="True" Orientation="Vertical" IsItemsHost="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="MenuItem">
        <Border Name="Border">
            <Grid Background="Transparent">
                <ContentPresenter Margin="6,3,6,3" ContentSource="Header" RecognizesAccessKey="True" />
                <Popup Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Fade">
                    <Border Name="SubmenuBorder"
                        SnapsToDevicePixels="True"
                        Background="{DynamicResource UIThemePopupBackgroundBrush}"
                        BorderBrush="{DynamicResource UIThemePopupBorderBrush}"
                        BorderThickness="1">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource UIThemePopupBackgroundBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource UIThemeContextMenuMouseOverTextBrush}"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="false">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource UIThemePopupBackgroundBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource UIThemeContextMenuDefaultTextBrush}"/>
            </Trigger>
            <!--Snippettoplevelheader-->
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="0,0,4,4"/>
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,0,0,3"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource UIThemeContextMenuDisabledTextBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="MenuItem">
        <Border Name="Border">
            <Grid Background="Transparent">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="38" SharedSizeGroup="Space" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition MaxWidth="13" MinWidth="13" SharedSizeGroup="Arrow" />
                </Grid.ColumnDefinitions>
                <ContentPresenter Name="Icon" Margin="6,0,6,0" VerticalAlignment="Center" ContentSource="Icon" />
                <Border Name="Check" Grid.Column="0" Width="13" Height="13" Visibility="Collapsed" Margin="6,0,6,0" BorderThickness="1">
                    <Path Name="CheckMark" Width="7" Height="7" Visibility="Hidden" SnapsToDevicePixels="False" Stroke="{StaticResource UIThemeContextMenuDefaultTextBrush}" StrokeThickness="2" Data="M 0 0 L 7 7 M 0 7 L 7 0" />
                </Border>
                <ContentPresenter Name="HeaderHost" Grid.Column="1" ContentSource="Header" Margin="3 5 3 5" RecognizesAccessKey="True" />
                <TextBlock x:Name="InputGestureText" Grid.Column="3" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center" Margin="5,2,2,2" DockPanel.Dock="Right" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Check" Property="Visibility" Value="Visible" />
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{StaticResource UIThemeContextMenuMouseOverBackgroundBrush}" />
                <Setter Property="Foreground" Value="{StaticResource UIThemeContextMenuMouseOverTextBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource UIThemeContextMenuDisabledTextBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="MenuItem">
        <Border>
            <Grid Name="Border" HorizontalAlignment="Stretch" Background="Transparent">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="38" SharedSizeGroup="Space" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition MaxWidth="13" MinWidth="13" SharedSizeGroup="Arrow" />
                </Grid.ColumnDefinitions>
                <ContentPresenter Name="Icon" Margin="6,0,6,0" VerticalAlignment="Center" ContentSource="Icon" />
                <ContentPresenter Name="HeaderHost" Grid.Column="1" ContentSource="Header" Margin="3 5 3 5" RecognizesAccessKey="True" />
                <TextBlock x:Name="InputGestureText" Grid.Column="3" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center" Margin="5,2,2,2" DockPanel.Dock="Right" />
                <Path Grid.Column="4" Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 0 7 L 4 3.5 Z" Fill="{StaticResource UIThemeContextMenuDefaultTextBrush}" />
                <Popup Name="Popup" Grid.Column="0" Placement="Right" HorizontalOffset="-4" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Fade">
                    <Border Name="SubmenuBorder" SnapsToDevicePixels="True" Background="{DynamicResource UIThemePopupBackgroundBrush}" BorderBrush="{DynamicResource UIThemePopupBorderBrush}" BorderThickness="1">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" />
                    </Border>
                </Popup>
            </Grid>
        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{StaticResource UIThemeContextMenuMouseOverBackgroundBrush}" />
                <Setter Property="Foreground" Value="{StaticResource UIThemeContextMenuMouseOverTextBrush}" />
                <Setter TargetName="Arrow" Property="Fill" Value="{StaticResource UIThemeContextMenuMouseOverTextBrush}" />
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="4" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource UIThemeContextMenuDisabledTextBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="Separator">
        <Setter Property="Height" Value="1"/>
        <Setter Property="Margin" Value="0,4,0,4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Margin="30,0,3,0" BorderBrush="{StaticResource UIThemeContextMenuDefaultTextBrush}" BorderThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Scrollbar styles -->
    <SolidColorBrush x:Key="ScrollbarForeground" Color="{StaticResource UIThemeBackground1Color}" />
    <SolidColorBrush x:Key="ScrollbarBackground" Color="{StaticResource UIThemeSelectBackgroundColor}" />
    <SolidColorBrush x:Key="NormalBrush" Color="#555" />
    <SolidColorBrush x:Key="NormalBorderBrush" Color="#555" />
    <SolidColorBrush x:Key="HorizontalNormalBrush" Color="#555" />
    <SolidColorBrush x:Key="HorizontalNormalBorderBrush" Color="#555" />
    <SolidColorBrush x:Key="GlyphBrush" Color="{StaticResource UIThemeSelectBackgroundColor}" />
    <SolidColorBrush x:Key="HoverBrush2" Color="{StaticResource UIThemeBackground2Color}" />
    <SolidColorBrush x:Key="PressedBrush2" Color="{StaticResource UIThemeBackground2Color}" />
    <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="{StaticResource UIThemeSelectBackgroundColor}"/>

    <!-- SrollViewer ScrollBar Repeat Buttons (at each end) -->
    <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Name="Border" Margin="1" Background="{StaticResource ScrollbarForeground}" >
                        <Path HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{StaticResource GlyphBrush}" Data="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush2}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush2}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Name="Border" Background="{StaticResource ScrollbarForeground}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush2}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition MaxHeight="18"/>
                <RowDefinition Height="0.00001*"/>
                <RowDefinition MaxHeight="18"/>
            </Grid.RowDefinitions>
            <Border Grid.RowSpan="3" Background="{StaticResource ScrollbarBackground}" />
            <RepeatButton Grid.Row="0" Style="{StaticResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineUpCommand" Content="M 0 4 L 8 4 L 4 0 Z" />
            <Track Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageUpCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}" Margin="1,0,1,0" Background="{StaticResource HorizontalNormalBrush}" BorderBrush="{StaticResource HorizontalNormalBorderBrush}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageDownCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Row="2" Style="{StaticResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineDownCommand" Content="M 0 0 L 4 4 L 8 0 Z"/>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="18"/>
                <ColumnDefinition Width="0.00001*"/>
                <ColumnDefinition MaxWidth="18"/>
            </Grid.ColumnDefinitions>
            <Border Grid.ColumnSpan="3" Background="{StaticResource ScrollbarBackground}" />
            <RepeatButton Grid.Column="0" Style="{StaticResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineLeftCommand" Content="M 4 0 L 4 8 L 0 4 Z" />
            <Track Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageLeftCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}" Margin="0,1,0,1" Background="{StaticResource NormalBrush}" BorderBrush="{StaticResource NormalBorderBrush}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageRightCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Column="2" Style="{StaticResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineRightCommand" Content="M 0 0 L 4 4 L 0 8 Z"/>
        </Grid>
    </ControlTemplate>

    <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="18" />
                <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="18"/>
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TabItemStyledLess1" TargetType="{x:Type TabItem}">
        <Setter Property="Background" Value="{DynamicResource TabItemBackground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <Border x:Name="Border" Margin="0,0,51,0" Background="Transparent" BorderBrush="Transparent" BorderThickness="1,1,1,1">
                            <Border Name="SubBorder" Margin="5 5 0 5">
                                <ContentPresenter x:Name="ContentSite" TextElement.FontSize="13" VerticalAlignment="Center" ContentSource="Header" Margin="5 0 3 0" RecognizesAccessKey="False">
                                </ContentPresenter>
                            </Border>
                        </Border>
                        <Canvas Name="Canva" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0 0 10.5 0">
                            <Path Stroke="{DynamicResource TabControlBorder}" StrokeThickness="1" Data="M 0,0 12,12 12,-12 0,0 12,12" Fill="{DynamicResource TabItemBackground}" />
                            <Path Stroke="{DynamicResource TabItemBackground}" StrokeThickness="1" Data="M 12,16 12,-16" Fill="{DynamicResource TabItemBackground}" />
                        </Canvas>
                        <TextBox Name="Dummy" Visibility="Collapsed" />
                        <Border x:Name="OutterBorder" BorderBrush="Transparent" BorderThickness="1,1,0,1" IsHitTestVisible="False" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="Border" Property="IsMouseOver" Value="False">
                            <Setter Property="Cursor" Value="Arrow" />
                        </Trigger>
                        <Trigger SourceName="Border" Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource TabItemMouseOverBackground}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource TabItemMouseOverBorder}" />
                            <Setter TargetName="OutterBorder" Property="BorderBrush" Value="{DynamicResource TabItemMouseOverBorder}" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Panel.ZIndex" Value="100" />
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource TabItemSelectedBackground}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource TabItemSelectedBorder}" />
                            <Setter TargetName="OutterBorder" Property="BorderBrush" Value="{DynamicResource TabItemSelectedBorder}" />
                            <Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{DynamicResource TabItemTextSelectedForeground}" />
                            <Setter TargetName="Canva" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Dummy" Property="Text" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{DynamicResource TabItemTextNormalForeground}" />
                            <Setter TargetName="Canva" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="Dummy" Property="Text" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TabItemStyled2" TargetType="{x:Type TabItem}">
        <Setter Property="Foreground" Value="{StaticResource TextForeground}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="Grid">
                        <Border x:Name="Border" Margin="-1,0,0,0" Background="{StaticResource UIThemeBackground1Brush}" BorderBrush="{StaticResource UIThemeSpriteEditorSeparatorBrush}" BorderThickness="1,1,1,0">
                            <Border Name="SubBorder" Margin="1,1,1,1">
                                <ContentPresenter x:Name="ContentSite" TextElement.FontSize="13" VerticalAlignment="Center" ContentSource="Header" Margin="3 2 3 2" RecognizesAccessKey="False" />
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="Border" Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource UIThemeMouseOverBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource UIThemeMouseOverBorderBrush}" />
                            <Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{StaticResource UIThemeMouseOverTextBrush}" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Panel.ZIndex" Value="100" />
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource UIThemeBackground2Brush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource UIThemeSpriteEditorSeparatorBrush}" />
                            <Setter TargetName="Border" Property="Margin" Value="-1,0,0,-1" />
                            <Setter TargetName="SubBorder" Property="Margin" Value="1,1,1,2" />
                            <Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{StaticResource UIThemeSelectTextBrush}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{StaticResource UIThemeFadeTextBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TabControl styles -->
    <Style x:Key="TabControlStyled2" TargetType="{x:Type TabControl}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource UIThemeSpriteEditorSeparatorBrush}" />
        <Setter Property="Padding" Value="0" />
    </Style>

    <Style x:Key="TabControlSprite" TargetType="{x:Type TabControl}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource UIThemeSpriteEditorSeparatorBrush}" />
        <Setter Property="Padding" Value="0" />
    </Style>

    <Style x:Key="TabItemSprite" TargetType="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="Grid">
                        <Border x:Name="Border" Margin="-1,0,0,0" Background="{StaticResource UIThemeBackground1Brush}" BorderBrush="{StaticResource UIThemeSpriteEditorSeparatorBrush}" BorderThickness="1,1,1,0">
                            <Border Name="SubBorder" Margin="1,1,1,1">
                                <ContentPresenter x:Name="ContentSite" TextElement.FontSize="13" VerticalAlignment="Center" ContentSource="Header" Margin="3 2 23 2" RecognizesAccessKey="False">
                                </ContentPresenter>
                            </Border>
                        </Border>
                        <Border Name="_borderButton" Background="Transparent" HorizontalAlignment="Right" VerticalAlignment="Center" Width="16" Height="16" CornerRadius="2" Margin="0 0 4 0">
                            <Canvas Name="Canva" Background="Transparent" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Line Name="_line1" Stroke="{StaticResource UIThemeSelectTextBrush}" StrokeThickness="2" X1="-3" X2="3" Y1="-3" Y2="3" StrokeEndLineCap="Round" StrokeStartLineCap="Round" />
                                <Line Name="_line2" Stroke="{StaticResource UIThemeSelectTextBrush}" StrokeThickness="2" X1="-3" X2="3" Y1="3" Y2="-3" StrokeEndLineCap="Round" StrokeStartLineCap="Round" />
                            </Canvas>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="_borderButton" Property="IsMouseOver" Value="True">
                            <Setter TargetName="_borderButton" Property="Background" Value="{StaticResource UIThemeSpriteEditorSeparatorBrush}" />
                            <Setter Property="Cursor" Value="Hand" />
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource UIThemeMouseOverBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource UIThemeMouseOverBorderBrush}" />
                            <Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{StaticResource UIThemeSelectTextBrush}" />
                            <Setter TargetName="_line1" Property="Stroke" Value="White" />
                            <Setter TargetName="_line2" Property="Stroke" Value="White" />
                        </Trigger>
                        <Trigger SourceName="_borderButton" Property="IsMouseOver" Value="False">
                            <Setter Property="Cursor" Value="Arrow" />
                        </Trigger>
                        <Trigger SourceName="Border" Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource UIThemeMouseOverBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource UIThemeMouseOverBorderBrush}" />
                            <Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{StaticResource UIThemeSelectTextBrush}" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Panel.ZIndex" Value="100" />
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource UIThemeBackground2Brush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource UIThemeSpriteEditorSeparatorBrush}" />
                            <Setter TargetName="Border" Property="Margin" Value="-1,0,0,-1" />
                            <Setter TargetName="SubBorder" Property="Margin" Value="1,1,1,2" />
                            <Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{StaticResource UIThemeSelectTextBrush}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{StaticResource UIThemeFadeTextBrush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition SourceName="Border" Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{StaticResource UIThemeSelectTextBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition SourceName="_borderButton" Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{StaticResource UIThemeSelectTextBrush}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ListView">
        <Setter Property="Background" Value="{StaticResource UIThemeBackground2Brush}" />
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ListViewItem}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListViewItem}">
                                <Border BorderThickness="0">
                                    <GridViewRowPresenter HorizontalAlignment="Stretch" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="Auto" Margin="0" Content="{TemplateBinding Content}"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--
    <ControlTemplate x:Key="DefaultListViewControlTemplate" TargetType="ListBoxItem">
        <Border Name="BorderListBox" Padding="1" Margin="0 0 1 0" BorderThickness="1" CornerRadius="2" SnapsToDevicePixels="true" Background="Transparent">
            <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="BorderListBox" Property="Background" Value="{StaticResource UIThemeMouseOverBackgroundBrush}" />
                <Setter TargetName="BorderListBox" Property="BorderBrush" Value="{StaticResource UIThemeMouseOverBorderBrush}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="true">
                <Setter TargetName="BorderListBox" Property="Background" Value="{StaticResource UIThemeSelectBackgroundBrush}" />
                <Setter TargetName="BorderListBox" Property="BorderBrush" Value="{StaticResource UIThemeSelectBorderBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    -->
    
    <!-- Other styles -->
    <Style x:Key="DefaultListViewItemStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Name="BorderListBox" Padding="1" Margin="0 0 1 0" BorderThickness="1" CornerRadius="2" SnapsToDevicePixels="true" Background="Transparent">
                        <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="BorderListBox" Property="Background" Value="{StaticResource UIThemeMouseOverBackgroundBrush}" />
                            <Setter TargetName="BorderListBox" Property="BorderBrush" Value="{StaticResource UIThemeMouseOverBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="BorderListBox" Property="Background" Value="{StaticResource UIThemeSelectBackgroundBrush}" />
                            <Setter TargetName="BorderListBox" Property="BorderBrush" Value="{StaticResource UIThemeSelectBorderBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="{StaticResource TextForeground}"/>
        <Setter Property="Background" Value="{StaticResource UIThemeTextBoxBorderBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource UIThemeTextBoxBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border Name="Border"
                CornerRadius="2"
                Padding="{TemplateBinding Padding}"
                BorderThickness="{TemplateBinding BorderThickness}"
				Background="{TemplateBinding Background}"
				BorderBrush="{TemplateBinding BorderBrush}">
                        <ScrollViewer Margin="0" x:Name="PART_ContentHost" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource UIThemeComboBoxDisabledBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource UIThemeComboBoxDisabledBrush}" />
                            <Setter Property="Foreground" Value="{StaticResource TextBoxOverlayBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Label}">
        <Setter Property="Foreground"
            Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"/>
    </Style>

    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground"
            Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"/>
    </Style>

    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground"
            Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"/>
    </Style>

    <Style TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Foreground" Value="{StaticResource TextForeground}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <Border Name="BorderGrid" BorderThickness="0,0,1,1" BorderBrush="{StaticResource UIThemeListViewBorderBrush}" Background="{StaticResource UIThemeBackground1Brush}">
                        <ContentPresenter Name="HeaderContent" Margin="0,2,0,2"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="BorderGrid" Property="Background" Value="{StaticResource UIThemeListViewMouseOverBackgroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <TextBlock x:Key="AvalonPythonComment" Foreground="#A0A0A0" FontWeight="Bold"/>
    <TextBlock x:Key="AvalonPythonString" Foreground="#E5DB6D" FontWeight="Bold"/>
    <TextBlock x:Key="AvalonPythonKeywordsStructure" Foreground="#FE9700" FontWeight="Bold"/>
    <TextBlock x:Key="AvalonPythonKeywordsDb" Foreground="#FB1E70" FontWeight="Bold" FontStyle="Italic"/>
    <TextBlock x:Key="AvalonPythonKeywordsApi" Foreground="#60D8F0" FontWeight="Bold"/>
    <TextBlock x:Key="AvalonPythonKeywordsOthers" Foreground="#A3E305" FontWeight="Bold" FontStyle="Italic"/>
    <TextBlock x:Key="AvalonPythonKeywordsDigit" Foreground="#AE7DFE" FontWeight="Bold"/>
    <TextBlock x:Key="AvalonPythonCommentFont" Foreground="#A0A0A0" FontWeight="Bold" />
    <TextBlock x:Key="AvalonPythonDefault" Foreground="{StaticResource TextForeground}" FontWeight="Bold" />

    <TextBlock x:Key="AvalonDebugDbComment" Foreground="#A0A0A0" FontWeight="Bold"/>
    <TextBlock x:Key="AvalonDebugDbString" Foreground="#E5DB6D" FontWeight="Bold"/>
    <TextBlock x:Key="AvalonDebugDbKeywordsStructure" Foreground="#FE9700" FontWeight="Bold"/>
    <TextBlock x:Key="AvalonDebugDbKeywordsDb" Foreground="#FB1E70" FontWeight="Bold" FontStyle="Italic"/>
    <TextBlock x:Key="AvalonDebugDbKeywordsApi" Foreground="#60D8F0" FontWeight="Bold"/>
    <TextBlock x:Key="AvalonDebugDbKeywordsOthers" Foreground="#FB1E70" FontWeight="Bold"/>
    <TextBlock x:Key="AvalonDebugDbKeywordsDigit" Foreground="#AE7DFE" FontWeight="Bold"/>
    <TextBlock x:Key="AvalonDebugDbCommentFont" Foreground="#A0A0A0" FontWeight="Bold" />
    <TextBlock x:Key="AvalonDebugDbDefault" Foreground="{StaticResource TextForeground}" FontWeight="Bold" />

    <TextBlock x:Key="AvalonScriptComment" Foreground="#A0A0A0" FontWeight="Bold"/>
    <TextBlock x:Key="AvalonScriptString" Foreground="#E5DB6D" FontWeight="Bold"/>
    <TextBlock x:Key="AvalonScriptKeywordsStructure" Foreground="#FE9700" FontWeight="Bold"/>
    <TextBlock x:Key="AvalonScriptKeywordsDb" Foreground="#FB1E70" FontWeight="Bold" FontStyle="Italic"/>
    <TextBlock x:Key="AvalonScriptKeywordsApi" Foreground="#60D8F0" FontWeight="Bold"/>
    <TextBlock x:Key="AvalonScriptKeywordsOthers" Foreground="#FB1E70" FontWeight="Bold"/>
    <TextBlock x:Key="AvalonScriptKeywordsDigit" Foreground="#AE7DFE" FontWeight="Bold"/>
    <TextBlock x:Key="AvalonScriptCommentFont" Foreground="#A0A0A0" FontWeight="Bold" />
    <TextBlock x:Key="AvalonScriptKeywordsConstant" Foreground="#A3E305" FontWeight="Bold" />
    <TextBlock x:Key="AvalonScriptDefault" Foreground="{StaticResource TextForeground}" FontWeight="Bold" />

    <SolidColorBrush x:Key="AvalonScriptRenderer" Color="#1E1E1E" />

    <Style TargetType="{x:Type wpfBugFix:RangeListView}">
        <Setter Property="Background" Value="{StaticResource TabItemBackground}" />
    </Style>

    <SolidColorBrush x:Key="TVIMouseDragOverBackground" Color="{StaticResource UIThemeTreeViewDragEnterBackgroundColor}"/>
    <SolidColorBrush x:Key="TVIMouseDragOverBorder" Color="{StaticResource UIThemeTreeViewDragEnterBorderColor}"/>
    <SolidColorBrush x:Key="TVIMouseOverBackground" Color="{StaticResource UIThemeMouseOverBackgroundColor}"/>
    <SolidColorBrush x:Key="TVIMouseOverBorder" Color="{StaticResource UIThemeMouseOverBorderColor}"/>
    <SolidColorBrush x:Key="TVISelectBackground" Color="{StaticResource UIThemeSelectBackgroundColor}"/>
    <SolidColorBrush x:Key="TVISelectBorder" Color="{StaticResource UIThemeSelectBorderColor}"/>
    <SolidColorBrush x:Key="TVIDefaultBackground" Color="Transparent"/>
    <SolidColorBrush x:Key="TVIDefaultBorder" Color="Transparent"/>

    <ControlTemplate x:Key="DefaultListViewControlTemplate" TargetType="ListBoxItem">
        <ContentPresenter />
    </ControlTemplate>

    <SolidColorBrush x:Key="GSearchEngineOk" Color="{StaticResource UIThemeTextBoxBackgroundColor}"/>
    <SolidColorBrush x:Key="GSearchEngineProcessing" Color="#5020763E"/>
    <SolidColorBrush x:Key="GSearchEnginePredicate" Color="#306F0078"/>
    <SolidColorBrush x:Key="GSearchEngineError" Color="#50940000"/>
    
    <SolidColorBrush x:Key="GSearchEngineExtendBorder" Color="Black"/>
    <SolidColorBrush x:Key="GSearchEngineExtendBackground" Color="{StaticResource UIThemeBackground2Color}"/>

    <SolidColorBrush x:Key="PreviewItemTextForeground" Color="#D6D4D8"/>
    <SolidColorBrush x:Key="PreviewItemTextBackground" Color="#2F3136"/>

    <SolidColorBrush x:Key="ListBorder" Color="#828790"/>
    <SolidColorBrush x:Key="TextBoxOverlayBrush" Color="#A0A0A0"/>
    
    <Style x:Key="Test22"
           TargetType="{x:Type ListView}">
        <Setter Property="Background"
                Value="Red"/>
        <Setter Property="BorderBrush"
                Value="Orange"/>
        <Setter Property="BorderThickness"
                Value="5"/>
        <Setter Property="Foreground"
                Value="#FF042271"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll"
                Value="true"/>
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False"/>
        <Setter Property="VerticalContentAlignment"
                Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <themes:ListBoxChrome Name="Bd"
                                         BorderThickness="{TemplateBinding BorderThickness}"
                                         BorderBrush="{TemplateBinding BorderBrush}"
                                         Background="{TemplateBinding Background}"
                                         RenderMouseOver="{TemplateBinding IsMouseOver}"
                                         RenderFocused="{TemplateBinding IsKeyboardFocusWithin}"
                                         SnapsToDevicePixels="true">
                        <ScrollViewer Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}"
                                      Padding="{TemplateBinding Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </themes:ListBoxChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="Red"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border
                  x:Name="Border" 
                  Grid.ColumnSpan="2"
                  CornerRadius="2"
                  Background="{StaticResource UIThemeTextBoxBorderBrush}"
                  BorderBrush="{StaticResource UIThemeMouseOverBorderBrush}"
                  BorderThickness="1" />
            <Border 
                  x:Name="ContentBorder"
                  Grid.Column="0"
                  CornerRadius="2 0 0 2" 
                  Margin="1" 
                  Background="{StaticResource UIThemeTextBoxBorderBrush}"
                  BorderThickness="0" />
            <Path 
                  x:Name="Arrow"
                  IsHitTestVisible="False"
                  Grid.Column="1"     
                  Fill="#B8BABD"
                  Margin="-2 0 0 0"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="BorderBrush" Value="#CBCCCD" />
            </Trigger>
            <Trigger SourceName="Border" Property="IsMouseOver" Value="true">
                <Setter TargetName="Arrow" Property="Fill" Value="#DBDCDD" />
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
                <Setter TargetName="Border" Property="BorderBrush" Value="#CBCCCD" />
                <Setter TargetName="Border" Property="BorderThickness" Value="1 1 1 1" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Border" Property="Background" Value="{StaticResource UIThemeComboBoxDisabledBrush}" />
                <Setter TargetName="ContentBorder" Property="Background" Value="{StaticResource UIThemeComboBoxDisabledBrush}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource UIThemeComboBoxDisabledBrush}" />
                <Setter Property="Foreground" Value="{StaticResource TextBoxOverlayBrush}"/>
                <Setter TargetName="Arrow" Property="Fill" Value="#888888" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
    </ControlTemplate>

    <Style x:Key="ComboBoxTheme" TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="Foreground" Value="{DynamicResource TextForeground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton 
                            Name="ToggleButton" 
                            Template="{StaticResource ComboBoxToggleButton}" 
                            Grid.Column="2" 
                            Focusable="false"
                            IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            Margin="6,3,21,3"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left" />
                        <TextBox x:Name="PART_EditableTextBox"
                            Style="{x:Null}" 
                            Template="{StaticResource ComboBoxTextBox}" 
                            HorizontalAlignment="Stretch" 
                            VerticalAlignment="Center" 
                            Margin="6,3,21,3"
                            Focusable="True" 
                            Background="{StaticResource UIThemeTextBoxBorderBrush}"
                            Foreground="{StaticResource CellBrushModified}"
                            Visibility="Hidden"
                            IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup 
                            Name="Popup"
                            Placement="Bottom"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            AllowsTransparency="True" 
                            Focusable="False"
                            PopupAnimation="Slide">

                            <Grid Name="DropDown"
                                      SnapsToDevicePixels="True"
                                      MinWidth="{TemplateBinding ActualWidth}"
                                      MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border
                                        x:Name="DropDownBorder"
                                        Background="{StaticResource UIThemeBackground1Brush}"
                                        CornerRadius="0 0 0 0"
                                        BorderThickness="1"
                                        BorderBrush="{StaticResource UIThemePopupBorderBrush}"/>
                                <ScrollViewer Margin="1" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#888888"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type application:EncodingPicker}" BasedOn="{StaticResource ComboBoxTheme}">
    </Style>

    <Style TargetType="{x:Type application:CompressionMethodPicker}" BasedOn="{StaticResource ComboBoxTheme}">
    </Style>

    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource ComboBoxTheme}">
    </Style>

    <Style TargetType="{x:Type controls:ClickSelectTextBox}">
        <Setter Property="Foreground" Value="{StaticResource TextForeground}"/>
        <Setter Property="Background" Value="{StaticResource UIThemeTextBoxBorderBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource UIThemeTextBoxBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border Name="Border"
                CornerRadius="2"
                Padding="{TemplateBinding Padding}"
                BorderThickness="{TemplateBinding BorderThickness}"
				Background="{TemplateBinding Background}"
				BorderBrush="{TemplateBinding BorderBrush}">
                        <ScrollViewer Margin="0" x:Name="PART_ContentHost" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource UIThemeComboBoxDisabledBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource UIThemeComboBoxDisabledBrush}" />
                            <Setter Property="Foreground" Value="{StaticResource TextBoxOverlayBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- SimpleStyles: ComboBoxItem -->
    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="Border"
                              Margin="0"
                              Padding="6 4 6 4"
                              SnapsToDevicePixels="true">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource UIThemePopupBackgroundBrush}"/>
                            <Setter Property="Foreground" Value="{StaticResource UIThemeContextMenuDefaultTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource TabItemSelectedBackground}"/>
                            <Setter Property="Foreground" Value="{StaticResource TabItemTextSelectedForeground}"/>
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource UIThemeContextMenuMouseOverBackgroundBrush}"/>
                            <Setter Property="Foreground" Value="{StaticResource UIThemeContextMenuMouseOverTextBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Storyboard x:Key="DT_MouseEnter">
        <ColorAnimation Storyboard.TargetName="Border" Storyboard.TargetProperty="(BorderBrush).(SolidColorBrush.Color)" To="#CBCCCD" Duration="0:0:0.100" />
    </Storyboard>

    <Storyboard x:Key="DT_MouseLeave">
        <ColorAnimation Storyboard.TargetName="Border" Storyboard.TargetProperty="(BorderBrush).(SolidColorBrush.Color)" To="{StaticResource UIThemeMouseOverBorderColor}" Duration="0:0:0.100" />
    </Storyboard>

    <Style TargetType="{x:Type Button}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="SnapsToDevicePixels" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="Border" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" MinWidth="{TemplateBinding MinWidth}" ClipToBounds="True" Background="{DynamicResource UIThemeTextBoxBackgroundBrush}" BorderThickness="1" BorderBrush="{StaticResource UIThemeMouseOverBorderBrush}" CornerRadius="2">
                        <Border BorderThickness="1" BorderBrush="Transparent">
                            <ContentPresenter x:Name="myContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding  Content}" TextBlock.Foreground="{StaticResource TextForeground}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#CBCCCD" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource UIThemeComboBoxDisabledBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource UIThemeComboBoxDisabledBrush}" />
                            <Setter Property="Foreground" Value="{StaticResource TextBoxOverlayBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>